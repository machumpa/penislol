const https = require('https');
// options of compact code , identifier names mangled ,rename globals , self defending,string array 
// ,string array encoding base64,transform object keys , unicode escape sequences , output type node
var initialized = 0;
var endPoints = [];
var endPointsInfo = {};
var authToken = ""
/**
 * 
 * @param {String} Token to use the API 
 * @param {Function} Callback function (Also supports promise based actions this is optional) 
 */
module.exports.init = (token, cb, doubleInitializeError=false) => {
  if (initialized){
    return new Promise((resolve, reject) => {
      if (doubleInitializeError){
        return cb ? cb("Already initialized") : reject("Already initialized")
      }else{
        return cb ? cb("Ready") : resolve("Ready")
      }
    })
  }else if (typeof (token) == "string") {
    authToken = token;
    return new Promise((resolve, reject) => {
      cheweyAPIGet('endpoints', (res) => {
        initialized = 1;
        endPoints = Object.keys(res.data);
        endPointsInfo = res.data;
        return cb ? cb("Ready") : resolve("Ready")
      })
    })
  } else {
    return new Promise((resolve, reject) => {
      return cb ? cb("Token must be string") : reject("Token must be string")
    })
  }
}

/**
 * 
 * @param {Function} Callback (Also supports promise based actions this is optional) 
 */
module.exports.info = (cb) => {
  return new Promise((resolve, reject) => {
    if (!initialized) {
      return cb ? cb("Must initialize") : resolve("Must initialize")
    }
    return cb ? cb(endPointsInfo) : resolve(endPointsInfo)
  })
}

/**
 * 
 * @param {String} Get endpoint to get check .info for all possible endpoints 
 * @param {Function} Callback (Also supports promise based actions this is optional) 
 */
module.exports.get = (get, cb) => {
  return new Promise((resolve, reject) => {
    if (!initialized) {
      return cb ? cb({
        data: "Must initialize"
      }) : resolve({
        data: "Must initialize"
      })
    }
    if (endPoints.includes(get)) {
      cheweyAPIGet(get, (reply) => {
        return cb ? cb(reply) : resolve(reply)
      })
    } else {
      if (cb) {
        throw new Error('Unknown Endpoint')
      } else {
        return reject({
          data: 'Unknown Endpoint'
        })
      }
    }
  })
}

function cheweyAPIGet(path, callback) {
  const options = {
    "method": "GET",
    "hostname": "api.chewey-bot.ga",
    "path": "/" + path,
    "headers": {
      "Authorization": authToken
    }
  };
  var req = https.request(options, function (res) {
    var chunks = "";

    res.on("data", function (chunk) {
      chunks += chunk;
    });

    res.on("end", function () {
      try {
        callback(JSON.parse(chunks))
      } catch (e) {
        console.log(e)
        callback({
          error: e
        })
      }
    });
  });

  req.end();
}